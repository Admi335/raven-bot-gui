/* This program is a Discord bot made using discord.js, a Discord API implementation for node.js
 *
 * This program is licensed under the GPLv2 license
 * Copyright (C) 2021 Adam Říha
 *
 * See the whole notice in /main.js; a copy of the GNU General Public License is located in the root folder of this project
 */

const { MessageEmbed } = require('discord.js');
const ytdl = require('ytdl-core');

const sendMsg = require('./sendMsg.js');

const queue = new Map();

async function queueSong(message, url, serverQueue) {

    // Check if video exists. If so, get videoDetails from the URL
    let songInfo;

    try {
        songInfo = (await ytdl.getInfo(url)).videoDetails;
    } catch (err) {
        return sendMsg("This video is unavailable!", message.channel);
    }

    if (!songInfo) return;

    // Modify song title and author to try match the official names
    let songTitle = songInfo.title;
    let songAuthor = songInfo.author.name;

    if (songAuthor.includes(" - Topic") && songInfo.description.includes("Auto-generated by YouTube.")) {
        songAuthor = songAuthor.substring(0, songAuthor.indexOf(" - Topic"));
    }
    else if (songAuthor.endsWith("VEVO")) {
        songAuthor = songAuthor.substring(0, songAuthor.indexOf("VEVO"));
    }
    else if (songAuthor.endsWith(" Official")) {
        songAuthor = songAuthor.substring(0, songAuthor.indexOf(" Official"));
    }

    if (songTitle.startsWith(songAuthor + " - ") || songTitle.replace(/\s/g, '').substr(0, songAuthor.length) == songAuthor) {
        songTitle = songTitle.substr(songAuthor.length + " - ".length).trimLeft();
        songAuthor = songInfo.title.substring(0, songInfo.title.indexOf(" - "));
    }

    const song = {
        title: songTitle,
        url: songInfo.video_url,
        lengthSeconds: songInfo.lengthSeconds,
        author: songAuthor,
        requestAuthorID: message.author.id,
        thumbnails: songInfo.thumbnails
    };

    // Create a queue if one doesn't exist
    if (!serverQueue) {
        const queueContruct = {
            textChannel: message.channel,
            voiceChannel: message.member.voice.channel,
            connection: null,
            songs: [],
            volume: 5,
            playing: true
        };

        queue.set(message.guild.id, queueContruct);
        queueContruct.songs.push(song);

        try {
            let connection = await message.member.voice.channel.join();
            queueContruct.connection = connection;

            play(message.guild, queueContruct.songs[0]);
        } catch (err) {
            console.log(err);
            queue.delete(message.guild.id);

            return sendMsg("err", message.channel);
        }
    }
    
    // If a queue does exist, push the song into it
    else {
        serverQueue.songs.push(song);
        console.log(serverQueue.songs);

        const queuedEmbed = new MessageEmbed()
            .setColor('#202020')
            .setDescription(`Queued [${song.title}](${song.url}) by **${song.author}** [${message.author}]`);
                
        return sendMsg(queuedEmbed, serverQueue.textChannel);
    }
}

function play(guild, song) {
    const serverQueue = queue.get(guild.id);

    if (!song) {
        serverQueue.voiceChannel.leave();
        queue.delete(guild.id);
        return;
    }

    const dispatcher = serverQueue.connection
        .play(ytdl(song.url))
        .on("finish", () => {
            serverQueue.songs.shift();
            play(guild, serverQueue.songs[0]);
        })
        .on("error", error => console.error(error));

    dispatcher.setVolumeLogarithmic(serverQueue.volume / 10);


    // Now playing - embed
    const nowPlayingEmbed = new MessageEmbed()
        .setColor('#0099ff')
        .setTitle('Now playing')
        .setDescription(`[${song.title}](${song.url}) by **${song.author}** [<@${song.requestAuthorID}>]`);

    sendMsg(nowPlayingEmbed, serverQueue.textChannel);
}

function skip(serverQueue) {
    serverQueue.connection.dispatcher.end();
}

function stop(serverQueue) {
    serverQueue.songs = [];
    serverQueue.connection.dispatcher.end();
}

function getQueue() {
    return queue;
}

module.exports = {
    queueSong,
    skip,
    stop,
    getQueue
};